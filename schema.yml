openapi: 3.0.3
info:
  title: Ticket Master
  version: 1.0.0
  description: Esta API foi criada para a entrega do projeto final do M5
paths:
  /api/comment/{comment_id}/:
    get:
      operationId: api_comment_retrieve
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: api_comment_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: api_comment_partial_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: api_comment_destroy
      parameters:
      - in: path
        name: comment_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/comment/register/{ticket_id}/:
    post:
      operationId: api_comment_register_create
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/comment/ticket/{ticket_id}/:
    get:
      operationId: api_comment_ticket_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: ticket_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
  /api/comment/user/{user_id}/:
    get:
      operationId: api_comment_user_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
  /api/department/:
    get:
      operationId: api_department_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDepartmentList'
          description: ''
    post:
      operationId: api_department_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/department/{department_id}/:
    get:
      operationId: api_department_retrieve
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    put:
      operationId: api_department_update
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    patch:
      operationId: api_department_partial_update
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    delete:
      operationId: api_department_destroy
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/department/{department_id}/activate/:
    put:
      operationId: api_department_activate_update
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    patch:
      operationId: api_department_activate_partial_update
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/login/:
    post:
      operationId: api_login_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/register/:
    get:
      operationId: api_register_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/solution/ticket/{ticket_id}/:
    get:
      operationId: api_solution_ticket_retrieve
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this ticket.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSerializerDetailed'
          description: ''
  /api/solutions/:
    get:
      operationId: api_solutions_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSolutionSerializerDetailedNoSupportList'
          description: ''
    post:
      operationId: api_solutions_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Solution'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Solution'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Solution'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
          description: ''
  /api/solutions/{solution_id}/:
    get:
      operationId: api_solutions_retrieve
      parameters:
      - in: path
        name: solution_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this solution.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionSerializerDetailed'
          description: ''
  /api/solutions/department/{department_id}/:
    get:
      operationId: api_solutions_department_retrieve
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/summary/tickets/:
    get:
      operationId: api_summary_tickets_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTicketSerializerDetailedList'
          description: ''
  /api/tickets/:
    get:
      operationId: api_tickets_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTicketList'
          description: ''
    post:
      operationId: api_tickets_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ticket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: ''
  /api/tickets/{ticket_id}/:
    get:
      operationId: api_tickets_retrieve
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this ticket.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSerializerDetailed'
          description: ''
    put:
      operationId: api_tickets_update
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this ticket.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSerializerDetailed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketSerializerDetailed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketSerializerDetailed'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSerializerDetailed'
          description: ''
    patch:
      operationId: api_tickets_partial_update
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this ticket.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTicketSerializerDetailed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTicketSerializerDetailed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTicketSerializerDetailed'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSerializerDetailed'
          description: ''
    delete:
      operationId: api_tickets_destroy
      parameters:
      - in: path
        name: ticket_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this ticket.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/tickets/department/{department_id}/:
    get:
      operationId: api_tickets_department_retrieve
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/tickets/department/{department_id}/newest/:
    get:
      operationId: api_tickets_department_newest_retrieve
      parameters:
      - in: path
        name: department_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/tickets/support_user/{support_user_id}/:
    get:
      operationId: api_tickets_support_user_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: support_user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTicketSerializerNoSupportList'
          description: ''
  /api/tickets/user/{user_id}/:
    get:
      operationId: api_tickets_user_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTicketSerializerDetailedList'
          description: ''
  /api/users/:
    get:
      operationId: api_users_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{user_id}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/users/{user_id}/userActivate/:
    put:
      operationId: api_users_userActivate_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchActivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPatchActivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPatchActivate'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPatchActivate'
          description: ''
    patch:
      operationId: api_users_userActivate_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserPatchActivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserPatchActivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserPatchActivate'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPatchActivate'
          description: ''
  /api/users/order/time/:
    get:
      operationId: api_users_order_time_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        ticket:
          allOf:
          - $ref: '#/components/schemas/Ticket'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - content
      - created_at
      - id
      - ticket
      - user
    Department:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 20
        is_active:
          type: boolean
          readOnly: true
      required:
      - id
      - is_active
      - name
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 20
        is_active:
          type: boolean
      required:
      - id
      - name
    PaginatedCommentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedDepartmentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Department'
    PaginatedSolutionSerializerDetailedNoSupportList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SolutionSerializerDetailedNoSupport'
    PaginatedTicketList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
    PaginatedTicketSerializerDetailedList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TicketSerializerDetailed'
    PaginatedTicketSerializerNoSupportList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TicketSerializerNoSupport'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedComment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        ticket:
          allOf:
          - $ref: '#/components/schemas/Ticket'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
    PatchedDepartment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 20
        is_active:
          type: boolean
          readOnly: true
    PatchedTicketSerializerDetailed:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        is_solved:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        urgency:
          $ref: '#/components/schemas/UrgencyEnum'
        status:
          type: string
          readOnly: true
        support_department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        support:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 20
        department:
          type: string
          format: uuid
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        password:
          type: string
          writeOnly: true
          maxLength: 128
    PatchedUserPatchActivate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 20
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        department:
          type: string
          format: uuid
          nullable: true
    Solution:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        solved_at:
          type: string
          format: date-time
          readOnly: true
        time_taken:
          type: string
          readOnly: true
        ticket:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
          readOnly: true
      required:
      - description
      - id
      - solved_at
      - ticket
      - time_taken
      - user
    SolutionSerializerDetailed:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        solved_at:
          type: string
          format: date-time
          readOnly: true
        time_taken:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        ticket:
          allOf:
          - $ref: '#/components/schemas/TicketSerializerDetailed'
          readOnly: true
      required:
      - description
      - id
      - solved_at
      - ticket
      - time_taken
      - user
    SolutionSerializerDetailedNoSupport:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        solved_at:
          type: string
          format: date-time
          readOnly: true
        time_taken:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        ticket:
          allOf:
          - $ref: '#/components/schemas/TicketSerializerNoSupport'
          readOnly: true
      required:
      - description
      - id
      - solved_at
      - ticket
      - time_taken
      - user
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        is_solved:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        urgency:
          $ref: '#/components/schemas/UrgencyEnum'
        status:
          type: string
          readOnly: true
        support_department:
          type: string
          format: uuid
          nullable: true
        user:
          type: string
          format: uuid
          nullable: true
        support:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - description
      - id
      - status
    TicketSerializerDetailed:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        is_solved:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        urgency:
          $ref: '#/components/schemas/UrgencyEnum'
        status:
          type: string
          readOnly: true
        support_department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        support:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - created_at
      - description
      - id
      - is_solved
      - status
      - support
      - support_department
      - user
    TicketSerializerNoSupport:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        is_solved:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        urgency:
          $ref: '#/components/schemas/UrgencyEnum'
        status:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - created_at
      - description
      - id
      - status
      - user
    UrgencyEnum:
      enum:
      - High
      - Average
      - Low
      type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 20
        department:
          type: string
          format: uuid
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - id
      - is_superuser
      - password
      - username
    UserPatchActivate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          maxLength: 20
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        department:
          type: string
          format: uuid
          nullable: true
      required:
      - id
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
